# 연산 : 하나 이상의 대상으로부터 새로운 것을 만드는 것
# a + b -> a,b는 피연산자 / + 기호는 연산자

# 산술연산자 : 숫자 타입의 데이터의 연산
# 관계연산자 : 데이터들의 비교연산을 수행
# 논리연산자 : 논리값의 연산
# 비트연산자 : 데이터의 2진수 연산
# 대입연산자 : 특정 값을 변수에 대입해주는 연산을 수행
# 멤버연산자 : 시퀀스 객체에 특정 요소의 포함여부를 확인
# 식별연산자 : 두 개체의 메모리 위치를 비교


## 산술연산자
x = 10
y = 20
z = 3
print(x + y) # 더하기, 30
print(x - y) # 빼기, -10
print(x * y) # 곱하기, 200
print(y / x) # 나누기, 2.0
print(y % x) # 나머지, 0
print(x ** z) # 제곱, 1000(10의 3승)
print(x // z)  # 몫, 3


## 관계연산자
# - 대소 관계와 동등여부를 나타내는 연산자, 논리값을 결과값으로 반환
# - 같다의 기호는 == 를 사용
# - 같지 않다의 기호는 != 를 사용
x = 10
y = 20
print(x == y) # 값이 같다, False
print(x != y) # 값이 같지 않다, True
print(x > y) # 왼쪽 값이 오른쪽 값보다 크다, False
print(x < y) # 왼쪽 값이 오른쪽 값보다 작다, True
print(x >= y) # 왼쪽 값이 오른쪽 값보다 크거나 동일하다, False
print(x <= y) # 왼쪽 같이 오른쪽 값보다 작거나 동일하다, True


## 논리연산자
# - 여러개의 관계 연산자를 사용할 때 사용
x = True
y = False
print(x and y) # 논리 AND 연산, 둘 다 참일 때만 참, False
print(x or y) # 논리 OR 연산, 둘 중 하나만 참이어도 참, True
print(not (x and y)) # 논리 NOT 연산, 논리 상태를 반전, True


## 대입연산자
# = , 왼쪽 변수에 오른쪽 값을 할당, z = x+y -> z = x + y
# += , 왼쪽 변수에 오른쪽 값을 더하고 결과를 왼쪽 변수에 할당, z+= x -> z = z + x
# -= , 왼쪽 변수에서 오른쪽 값을 빼고 결과를 왼쪽 변수에 할당, z -= x -> z = z - x
# *= , 왼쪽 변수에 오른쪽 값을 곱하고 결과를 왼쪽 변수에 할당, z *= x -> z = z * x
# /= , 왼쪽 변수에서 오른쪽 값을 나누고 결과를 왼쪽 변수에 할당, z /= x -> z = z / x
# %= , 왼쪽 변수에서 오른쪽 값을 나눈 나머지의 결과를 왼쪽변수에 할당, z %= x -> z = z % x
# **= , 왼쪽 변수에서 오른쪽 값만큼 제곱을 하고 결과를 왼쪽변수에 할당, z **= x -> z = z ** x
# //= , 왼쪽 변수에서 오른쪽 값을 나눈 몫의 결과를 왼쪽변수에 할당, z //= x -> z = z // x
x = 10
y = 20
z = 0

z = x + y
print(z) #30
z += x 
print(z) #40, z = z + x
z -= x 
print(z) #30, z = z - x
z *= x 
print(z) #300, z = z * x
z %= 8
print(z) #4, z = z % 8
z **= x
print(z) #1048576 , z = z * x
z //= x
print(z) #104857, z = z // x


## 비트연산자
#  x = 10(0000 1010), y = 20(0001 0100)
#  bin() 함수 : 2진수로 변환

# x = 10(0000 1010), y = 20(0001 0100)
# & , AND 연산, 둘 다 참일 때만 만족, (x & y) = 0 -> 0000 0000
# | , OR 연산, 둘 중 하나만 참 이여도 만족, (x | y) = 30 -> 0001 1110
# ^ , XOR 연산, 둘 중 하나만 참일 때 만족, (x ^ y) = 30 -> 0001 1110
# ~ , 보수 연산, (~x) = -11 -> 1111 0101
# << , 왼쪽 시프트 연산자, 변수의 값을 왼쪽으로 지정된 비트 수만큼 이동, x << 2 = 40 -> 0010 1000
# >> , 오른쪽 시프트 연산자, 변수의 값을 오른쪽으로 지정된 비트 수만큼 이동, x >> 2 = 2 -> 0000 0010

x = 10
y = 20
print(bin(10)) #0b1010
print(bin(20)) #0b10100
print(bin(30)) #0b11110
print(x&y) #0
print(x|y) #30
print(x^y) #30
print(~x) #-11
print(x<<2) #40
print(x>>2) #2


## 멤버연산자
# x = 10, y = 20, list = [10,20,30,40,50]
# in , list 내에 포함되어 있으면 참, (x in list) = True
# not in , list 내에 포함되어 있지 않으면 참, (y not in list) = False
x = 10
y = 20
list = [10,20,30,40,50]
print(x in list) #True
print(x not in list) #False


## 식별연산자
# - 두 개체의 메모리 위치를 비교함
# x = 10, y = 10
# is , 개체메모리 위치나 값이 값다면 참, (x is y) = True
# is not , 개체 메모리 위치나 값이 같지 않다면 참, (x in not y) = False
x = 10
y = 10
z = 20
print(x is y) #True
print(x is z) #False
print(x is not y) #False


## 연산자의 우선순위
# - 가장 높은 우선 순위부터 모든 연산자를 보여줌
# ** , 지수 (전원으로 인상)
# + - , 단항 플러스와 마이너스
# * / % // , 곱하기, 나누기, 나머지, 몫
# + - , 덧셈과 뺄셈
# >> << , 좌우 비트 시프트
# & , 비트 AND
# ^ | , 비트 전용 OR와 정기적인 OR
# <= < > >= , 비교 연산자
# < > == != , 평등 연산자
# = %= /= //= -= *= **= , 할당 연산자
# is is not , 식별 연산자
# in not in , 맴버 연산자
# not or and , 논리 연산자


# 과목별 점수의 총합과 평균 및 총점과 평균 출력
# - 국어,영어, 수학 점수의 총합과 평균을 구하고 각 과목의 점수와 총점, 평균을 출력해보자
kor_score = 100
eng_score = 70
math_score = 80
sum_score = kor_score + eng_score + math_score
avg_score = sum_score / 3
print("국어 점수", kor_score) #국어 점수 100
print("영어 점수", eng_score) #영어 점수 70
print("수학 점수", math_score) #수학 점수 80
print("총점", sum_score) #총점 250
print("평균 점수",avg_score) #평균 점수 83.33333333333333


# 성별이 남성이고 18세 이상의 성인 여부를 판단하는 조건식을 만들어보자
gender = "male"
age = 20
check = gender == 'male' and age >= 18
print(check) #True