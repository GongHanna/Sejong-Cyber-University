## 문장의 반복
# - 파이썬은 이처럼 같은 작업을 반복처리 할 수 있는 반복문을 제공함
# - 반복문의 종류 : while문, for문



## while문

# - while expression(조건식) :
# -     반복실행할 코드

# - while 반복문은 expression 조건이 참인 동안 실행함
# - 반복 실행할 횟수를 모르는 경우 무한반복으로 처리함
# - while 반복의 명령문은 들여쓰기로 지정함
# - 반복 실행하는 명령문은 들여쓰기 될 때 시작되고 들여쓰기가 되지 않은 명령문을 만나면 종료됨

num = 0
while num < 5 :
    print(num)
    num += 1 #num = num +1
print("프로그램을 종료합니다.")
#0
#1
#2
#3
#4
#프로그램을 종료합니다.



## break
# - 반복문 밖으로 벗어나도록 하는데 사용되는 키워드
# - 중첩 반복문은 내부 반복문 안에 break가 있는 경우 내부 반복문을 벗어남
# - 무한 반복 사용시 특정 조건에 대해 반복을 벗어나야 하는 경우에 사용

#무한반복에서 특정 조건에서 반복문 탈출
num1 = 0
while True :
    if num1 > 4 :
        break
    print(num1)
    num1 += 1 #num1 = num1 +1
print("프로그램을 종료합니다.")
#0
#1
#2
#3
#4
#프로그램을 종료합니다.



## continue
# - 특정 조건에서 아래 처리 구문을 실행시키지 않도록 처리할 때 사용
# - 진행되는 반복 구문에서 continue를 만나면 그 아래 구문은 반복되지 않고 조건식으로 이동

#1~10 사이의 숫자 중 홀수만 출력
num2 = 1
while num2 <= 10 :
    if num2 % 2 == 0:
        num2 += 1
        continue
    print(num2)
    num2 += 1
print("프로그램을 종료합니다.")
#1
#3
#5
#7
#9
#프로그램을 종료합니다.



## for문

# - for value in sequence
# -     반복 블록

# - 특정 횟수만큼 반복하고 싶을 때 for 반복문을 사용함
# - range()함수를 사용하여 반복 횟수를 지정하는 방법을 많이 사용함
# - 일반적으로 리스트, 튜플 또는 문자열과 같은 반복 가능한 객체에서 사용
# - 반복 블록을 정의하고 해당 코드가 지정한 조건에 맞을 때 블록을 실행



## range() 함수
# - 순차적인 정수의 범위를 나타내기 위해 사용
# - range(x) : 0부터 x-1까지 정수의 순차적 범위
# - range(x,y) : x부터 y-1까지 정수의 순차적 범위
# - range(x,y,z) : x부터 y-1까지 z씩 증가하는 정수의 순차적 범위
# - range(x,y,-z) x부터 y+1까지 z씩 감소하는 정수의 순차적 범위

range(5) #0 ~ 5-1 순차적 범위의 정수 = range(0,5)
for i in range(5) : #5번 반복
    print(i)
#0
#1
#2
#3
#4

range(2,5) #1~ 5-1 순차적 범위의 정수
for i in range(2,5) :
    print(i)
#2
#3
#4

range(1,10,2) #1 ~ 10-1 사이의 2씩 증가한 순차적 범위의 정수값
for i in range(1,10,2) : 
    print(i)
#1
#3
#5
#7
#9

range(10,1,-2)
for i in range(10,1,-2) : #10 ~ 1-1 사이의 2씩 감소한 순차적 범위의 정수값
    print(i)
#10
#8
#6
#4
#2



## 시퀀스 자료형(sequence types)
# - 리스트, 튜플, range, 문자열처럼 값이 연속적으로 이어진 자료형
# - list : [10,20,30,40]
# - tuple : (10,20,30,40)
# - range : range()
# - str: "안녕하세요"

str = "안녕 하세요!"
for s in str : #str -> 시퀀스 타입
    print(s)
#안
#녕
#
#하
#세
#요
#!

list = [10,20,30,40]
for item in list :
    print(item)
#10
#20
#30
#40

tuple_temp = (10,20,30,40)
for item in tuple_temp :
    print(item)
#10
#20
#30
#40



#1부터 100까지의 합을 구하는 프로그램 작성1
sum = 0
for i in range(1,101) :
    sum += i
print("1~100까지의 합 :", sum) #1~100까지의 합 : 5050

#1부터 100까지의 합을 구하는 프로그램 작성2
num3 = 1
sum1 = 0
while num3 < 101 :
    sum1 += num3
    num3 += 1
print("1~100까지의 합 :", sum1) #1~100까지의 합 : 5050

#for문을 이용하여 1부터 10까지를 곱한 결과를 출력하는 프로그램 작성
result = 1
for i in range(1, 11) :
    result *= i
print("1~10까지의 곱: ", result) #1~10까지의 곱:  3628800

#while문을 이용하여 1부터 10까지를 곱한 결과를 출력하는 프로그램 작성
num4 = 1
result1 = 1
while num4 < 11:
    result1 *= num4
    num4 += 1
print("1~10까지의 곱 :", result1) #1~10까지의 곱 : 3628800

#구구단의 짝수단(2,4,6,8)만 출력하는 프로그램 작성
# - 단, 2단은 2*2까지, 4단은 4*4, 6단은 6*6, 8단은 8*8까지
for i in range(2,10,2) : #2부터 10-1(9까지)에서 2씩 증가 -> 2,4,6,8
    for j in range(1, i+1) : #2단일 때 1,2 / 4단일 때 1,2,3,4 / 6단일 때 1,2,3,4,5,6, 8단일 때 1,2,3,4,5,6,7,8
        print(i, "X", j, "=", i*j)

#while문을 무한 루프로 구성하여 작성하는 예제
# - 1부터 시작해서 모든 짝수와 3의 배수를 더해서 그 합이 언제 1000이 넘어서는지, 그리고 1000이 넘어선 값은 얼마가 되는지 계산하여 출력
num5 = 1
sum2 = 0
while True :
    #모든 짝수와 3의 배수를 찾고 더하기
    if num5 % 2 == 1 or num5 % 3 == 0 :
        sum2 += num5
        #print(num5, sum2)
        if (sum2 > 1000) : 
            break
    num5 += 1
print("마지막 숫자", num5, "을 더했을 때,") #마지막 숫자 55 을 더했을 때,
print("처음으로 1000을 넘은 숫자", sum2, "이 되었습니다.") #처음으로 1000을 넘은 숫자 1054 이 되었습니다.

