## 함수
# - 코드의 집합으로, 값을 전달하면 전달 받은 값을 이용하여 약속된 처리 한 후 처리도니 결과 또는 약속된 값을 반환해주는 기능
# - 함수를 만들어 놓고 프로그래밍 시에 가져다 사용함

# 사용자 정의 함수 : 사용자가 직접 작성하여 사용
# 람다함수 : 이름이 없는 익명함수
# 내장 함수 : 파이썬 인터프리터에서 기본적으로 포함하고 있느 함수, 프로그램에서 많이 사용되는 기능을 미리 만들어 놓은 함수
# 외장 함수 : 외부의 라이브러리에서 제공하는 함순

# 함수 사용 이유
# - 하나의 프로그램에서 반복 사용되는 부분을 함수로 작성함으로써, 코드의 크기를 줄이고 재사용할 수 있음
# - 공통으로 사용하는 기능이나 반복되는 코드를 재사용할 수 있음
# - 프로그램을 기능 단위로 분리하여 구조화 -> 고드의 가독성을 높이고 유지보수가 용이함

# 함수의 기본 정의
# - 프로그램의 규모가 커질 경우에는 프로그램을 작은 단위로 나누어 여러 개의 프로그램으로 작성하는 것이 원칙
# 프로그램 작업을 작은 작업들로 분해해서 함수로 작성 -> 이 함수들은 연결해서 프로그램 구성

# 함수의 정의
# - 함수 호출 시 사용하는 식별자, 함수명 다음에는 괄호()가 붙여 사용됨
# - 기능을 쉽게 연상할 수 있는 함수명 지정이 바람직함
# def 함수이름() :
#    실행코드

def fn() :
    print('fn() 호출 시 출력되는 문장입니다.')
    print('함수에서 처리하는 문장들은 들여쓰기를 해줍니다.')
print('들여쓰기가 안된 문장은 함수 호출 시 실행되지 않습니다.')
print('종료...')

# 함수호출
fn()
#fn() 호출 시 출력되는 문장입니다.
#함수에서 처리하는 문장들은 들여쓰기를 해줍니다.


## 함수의 매개변수
# - 함수가 호출될 때 전달되는 값들을 저장하는 변수임
# - 함수명 뒤의 괄호에 나열해서 함수 내부의 변수들과 구별함
# - 매개변수는 함수 호출 시에 값을 전달하게 되므로 함수 내부 내부에서는 바로 사용됨
#def 함수이름(매개변수1, 매개변수2, 매개변수3, ...) :
#    실행코드

#두 수를 받아 더하기 연산 후 결과를 출력하는 함수
def add(num1, num2) :
    result = num1 + num2
    print('전달받은 두 수의 합:', result) #전달받은 두 수의 합: 300
add(100,200)


## 매개변수의 종류와 활용
# - 디폴트 매개변수 : 함수를 호출할 때 매개변수에 값을 입력해주지 않아도 매개변수에 기본값을 사용
# - 매개변수 선언 시 "매개변수=값" 형식으로 사용
# - 기본 매개변수 뒤에는 일반 매개변수가 올 수 없음
#print_n_times(numn=2, value) -> (value, num=2)는 가능
#print_n_times("Hello")로 호출
# -> num이 매개변수인지, value가 매개변수인지 알 수 없음

#기본 매개변수
def print_nth(str, num=2): #str -> 내가 출력하고자 하는 문자열, num =2 -> 몇번 출력할것인지(2번)
    for i in range(num): #0,1
        print(str) #end는 디폴트 매개변수
print_nth('안녕하세요')
#안녕하세요
#안녕하세요

## 매개변수의 종류와 활용
# - 키워드 매개변수 : 함수를 호출할 때 함수 내에 있는 매개변수의 명칭을 직접 지정해서 값을 입력해줄 때 사용

#키워드 매개변수
print_nth("반가워요", num =5)
#반가워요
#반가워요
#반가워요
#반가워요
#반가워요


## 매개변수의 종류와 활용
# - 가변 매개변수 : 매개변수의 개수가 명확하지 않거나 여러개를 사용해야 하는 경우
#def 함수이름(매개변수, 매개변수, ..., *가변매개변수):
#    코드...
# - 가변 매개변수 뒤에는 일반 매개변수를 사용할 수 없음
# - 가변 매개변수는 함수에 하나만 사용할 수 있음

#가변 매개변수
def print_nth_str(num, *strs) : #*strs - 가변 매개변수
    for i in range(num):
        #매개변수는 리스트형식으로 사용
        for value in strs:
            print(value, end=" ") #end는 디폴트 매개변수
        #줄바꿈
        print()
print_nth_str(3, 'first', 'coding', 'Python')
#first coding Python
#first coding Python
#first coding Python



## 함수의 리턴
#def 함수이름(매개변수1, 매개변수2, 매개변수3, ...):
#    실행코드
#    실행코드
#    return(반환 값 도는 연산 식 또는 공백)
# - return 키워드를 이용하여 함수가 종료 될 때 값을 반환
#       -> 반환 값 기술 없이 return 을 쓰는 경우 값을 반환하지 않고 함수를 종료시킴

#두 수를 받아 더하기 연산 후 결과를 출력하는 함수
def add2(num1, num2):
    result2 = num1 + num2
    return result2
print(add2(100,200))#300

def checkAge(age):
    if age < 20:
        print('성인만 이용가능한 콘텐츠입니다.')
        print('프로그램을 종료합니다.')
        return
    print('금융상품 정보 게시판을 이용합니다.')
    print('Q&A 게시판을 이용합니다.')
#checkAge(10)
#성인만 이용가능한 콘텐츠입니다.
#프로그램을 종료합니다.
checkAge(30)
#금융상품 정보 게시판을 이용합니다.
#Q&A 게시판을 이용합니다.


## 변수의 사용 범위
# - 변수가 코드에서 사용되는 범위

## 지역변수 : 함수 내부에서 선언되어 함수 내부에서만 사용
def fn_local_var1():
    local_var = "지역 변수"
    print(local_var)
fn_local_var1()#지역 변수

# 잘못된 사용 방법
#def fn_local_var2():
#    local_var2 = "지역변수"
#    print(local_var2)
#print(local_var2)

## 전역변수 : 함수 외부에서 선언한 변수로 프로그램 전체에서 사용 -> 함수에서 global 키워드로 재 선언하면 함수에서 사용 가능
def func():
    global global_var #전역 변수로 선언
    global_var = "Global Var"
    local_var = "지역 변수"
    print(local_var)
    print(global_var)
global_var = "전역 변수"
func()
print(global_var) #함수를 먼저 호출했기 때문에 func(), Global Var로 출력됨
#지역 변수
#Global Var
#Global Var
